spring:
  redis:
    # Primary connection method - URL format with environment variables
    url: ${SPRING_REDIS_URL:redis://localhost:6379}
    # Fallback individual properties for logging/health checks
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    password: ${SPRING_REDIS_PASSWORD:}
    ssl: ${SPRING_REDIS_SSL:false}
    database: ${SPRING_REDIS_DATABASE:0}
    timeout: 5000ms
    connect-timeout: 3000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
      shutdown-timeout: 1000ms

  # CRITICAL: Force web application type
  main:
    web-application-type: reactive

  # âœ… CORS Configuration for Frontend Access
  webflux:
    cors:
      enable: true
      path-pattern: "/**"
      allowed-origins:
        - "https://ecommerce-microservices-platform.vercel.app"
        - "http://34.118.167.199.nip.io"
        - "http://localhost:3000"
        - "http://localhost:8080"
        - "http://localhost:3001"
      allowed-methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed-headers:
        - Content-Type
        - Authorization
        - X-Requested-With
        - Accept
        - Origin
      allow-credentials: false
      max-age: 3600

  # Add circuit breaker and retry configuration
  cloud:
    circuitbreaker:
      resilience4j:
        enabled: true
    loadbalancer:
      retry:
        enabled: true

jwt:
  secret: ${JWT_SECRET:change-me-in-production}
  expiration: ${JWT_EXPIRATION:1800000}

server:
  port: ${PORT:8080}
  address: 0.0.0.0
  servlet:
    context-path: /

services:
  user-service:
    url: ${USER_SERVICE_URL:http://localhost:9090}
    timeout: 5000ms
    retry:
      max-attempts: 3
      delay: 1000ms
  product-service:
    url: ${PRODUCT_SERVICE_URL:http://localhost:3001}
    timeout: 5000ms
    retry:
      max-attempts: 3
      delay: 1000ms

# Resilience configuration
resilience4j:
  circuitbreaker:
    instances:
      userService:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
      productService:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
      redis:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10

management:
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  health:
    # FIXED: Enable default health indicators
    defaults:
      enabled: true
    redis:
      enabled: true
    ping:
      enabled: true
    diskspace:
      enabled: true

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    com.ecommerce.cart: DEBUG
    org.springframework.data.redis: WARN
    io.lettuce.core: WARN

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    try-it-out-enabled: true
    filter: true
  show-actuator: true
  group-configs:
    - group: cart-api
      display-name: Cart Service API
      paths-to-match: 
        - /cart/**
    - group: health-api
      display-name: Health Check API
      paths-to-match:
        - /health/**

---

info:
  app:
    name: Cart Service
    description: Cart microservice with real user and product validation
    version: 3.0.0
    environment: ${NODE_ENV:development}