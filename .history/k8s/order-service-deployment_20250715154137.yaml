apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service-deployment
  labels:
    app: order-service
spec:
  replicas: 2
  strategy:                    # ← Added rolling update strategy
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
      - name: order-service
        image: order-service:latest
        imagePullPolicy: Never
        env:
        - name: DATABASE_URL
          value: "postgresql://user:pass@order-postgres-service.default.svc.cluster.local:5432/orderdb"
        - name: USER_SERVICE_URL
          value: http://user-service:9090
        - name: CART_SERVICE_URL
          value: http://cart-service:8080
        - name: PRODUCT_SERVICE_URL
          value: http://product-service:3001
        - name: SECRET_KEY
          value: your-super-secret-jwt-key-change-in-production
        - name: ALGORITHM
          value: HS256
        - name: REDIS_URL
          value: redis://:password123@redis-service:6379/0
        - name: CORS_ORIGINS                    # ← Added CORS configuration
          value: "http://localhost:3000,http://127.0.0.1:3000"
        - name: CORS_METHODS                    # ← Added CORS methods
          value: "GET,POST,PUT,DELETE,OPTIONS"
        - name: CORS_HEADERS                    # ← Added CORS headers
          value: "Content-Type,Authorization,X-Requested-With"
        ports:
        - containerPort: 8081
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-service
  ports:
  - port: 8081
    targetPort: 8081
  type: ClusterIP