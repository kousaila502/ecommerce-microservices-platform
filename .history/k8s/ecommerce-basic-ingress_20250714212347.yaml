# Frontend Ingress - No rewriting needed
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 3000

---
# FIXED User Service Ingress - Remove only /api prefix, keep /auth
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-service-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /api/(auth/.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-service
                port:
                  number: 9090

---
# FIXED Product Service Ingress - Handle both /api/products/X and /api/products/products/X patterns
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: product-service-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* ^/api/products/products/(.*)$ {
        rewrite ^/api/products/products/(.*)$ /products/$1 break;
        proxy_pass http://product-service.default.svc.cluster.local:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
      
      location ~* ^/api/products/(.*)$ {
        rewrite ^/api/products/(.*)$ /products/$1 break;
        proxy_pass http://product-service.default.svc.cluster.local:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
      
      location = /api/products {
        rewrite ^/api/products$ /products break;
        proxy_pass http://product-service.default.svc.cluster.local:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /api/products
            pathType: Prefix
            backend:
              service:
                name: product-service
                port:
                  number: 3001

---
# WORKING Cart Service Ingress - Revert to simple rewrite that was working
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cart-service-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/enable-cors: "true"
     
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /api/(cart/.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: cart-service
                port:
                  number: 8080

---
# FIXED Order Service Ingress - Handle both /api/orders/X and /api/orders/orders/X patterns
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: order-service-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* ^/api/orders/orders/(.*)$ {
        rewrite ^/api/orders/orders/(.*)$ /orders/$1 break;
        proxy_pass http://order-service.default.svc.cluster.local:8081;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
      
      location ~* ^/api/orders/(.*)$ {
        rewrite ^/api/orders/(.*)$ /orders/$1 break;
        proxy_pass http://order-service.default.svc.cluster.local:8081;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
      
      location = /api/orders {
        rewrite ^/api/orders$ /orders/ break;
        proxy_pass http://order-service.default.svc.cluster.local:8081;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /api/orders
            pathType: Prefix
            backend:
              service:
                name: order-service
                port:
                  number: 8081

---
# NEW Search Service Ingress - Handle both /api/search/X and /api/search/search/X patterns
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: search-service-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* ^/api/search/search/(.*)$ {
        rewrite ^/api/search/search/(.*)$ /search/$1 break;
        proxy_pass http://search-service.default.svc.cluster.local:8082;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
      
      location ~* ^/api/search/(.*)$ {
        rewrite ^/api/search/(.*)$ /search/$1 break;
        proxy_pass http://search-service.default.svc.cluster.local:8082;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
      
      location = /api/search {
        rewrite ^/api/search$ /search break;
        proxy_pass http://search-service.default.svc.cluster.local:8082;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin *;
      }
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /api/search
            pathType: Prefix
            backend:
              service:
                name: search-service
                port:
                  number: 8082