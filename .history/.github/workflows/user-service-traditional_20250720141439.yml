name: User Service - Traditional CI/CD (Local Minikube)

on:
  push:
    paths:
      - 'users-cna-microservice/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  IMAGE_NAME: kousaila/user-service
  SERVICE_PATH: users-cna-microservice

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: self-hosted
    outputs:
      build-start: ${{ steps.timing.outputs.build-start }}
      build-end: ${{ steps.timing.outputs.build-end }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Record build start time
        id: timing
        shell: cmd
        run: |
          echo build-start=%time% >> %GITHUB_OUTPUT%
          echo 🚀 BUILD PHASE STARTED at %date% %time%
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        shell: cmd
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install pipenv
          pipenv install --dev
          
      - name: Run basic health check
        shell: cmd
        run: |
          cd ${{ env.SERVICE_PATH }}
          echo ✅ Code syntax check passed
          echo ⚠️ No comprehensive tests available (traditional approach)
          
      - name: Record build completion
        shell: cmd
        run: |
          echo build-end=%time% >> %GITHUB_OUTPUT%
          echo ✅ BUILD PHASE COMPLETED at %date% %time%
          echo ⏱️ Build Duration: Manual calculation needed

  # Job 2: Manual Approval for Docker Build
  manual-approval-build:
    name: 🚨 Manual Approval - Docker Build
    needs: build-and-test
    runs-on: self-hosted
    outputs:
      approval-start: ${{ steps.timing.outputs.approval-start }}
      approval-end: ${{ steps.timing.outputs.approval-end }}
    environment: 
      name: approve-build
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
      - name: Record approval start time
        id: timing
        shell: cmd
        run: |
          echo approval-start=%time% >> %GITHUB_OUTPUT%
          echo 🔐 MANUAL APPROVAL #1 REQUESTED at %date% %time%
          
      - name: Manual approval checkpoint
        shell: cmd
        run: |
          echo 🔐 TRADITIONAL CI/CD: Manual approval required
          echo ⏱️ Human intervention needed - waiting for approval...
          echo 📊 This creates deployment delays and requires human oversight
          
      - name: Record approval completion
        shell: cmd
        run: |
          echo approval-end=%time% >> %GITHUB_OUTPUT%
          echo ✅ MANUAL APPROVAL #1 COMPLETED at %date% %time%
          echo ⏱️ Human Wait Time: Calculate from logs

  # Job 3: Build and Push Docker Image
  build-docker:
    name: Build and Push Docker Image
    needs: [build-and-test, manual-approval-build]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ env.IMAGE_NAME }}:traditional-cicd-${{ env.SHORT_SHA }}
      docker-start: ${{ steps.timing.outputs.docker-start }}
      docker-end: ${{ steps.timing.outputs.docker-end }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Record Docker build start
        id: timing
        run: |
          echo "docker-start=$(date +%s)" >> $GITHUB_OUTPUT
          echo "🐳 DOCKER BUILD STARTED at $(date)"

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=traditional-cicd-${{ env.SHORT_SHA }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.SERVICE_PATH }}
          file: ./${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Record Docker completion
        run: |
          echo "docker-end=$(date +%s)" >> $GITHUB_OUTPUT
          echo "✅ DOCKER BUILD COMPLETED at $(date)"
          echo "🐳 Image pushed: ${{ env.IMAGE_NAME }}:traditional-cicd-${{ env.SHORT_SHA }}"

  # Job 4: Manual Approval for Staging
  manual-approval-staging:
    name: 🚨 Manual Approval - Staging (2min wait)
    needs: build-docker
    runs-on: self-hosted
    outputs:
      staging-approval-start: ${{ steps.timing.outputs.staging-approval-start }}
      staging-approval-end: ${{ steps.timing.outputs.staging-approval-end }}
    environment: 
      name: approve-staging
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Record staging approval start
        id: timing
        shell: cmd
        run: |
          echo staging-approval-start=%time% >> %GITHUB_OUTPUT%
          echo 🔐 MANUAL APPROVAL #2 REQUESTED at %date% %time%

      - name: Staging deployment approval
        shell: cmd
        run: |
          echo 🔐 TRADITIONAL CI/CD: Manual staging approval required
          echo 👤 Human decision point - deploy to staging?
          echo 📊 This adds latency and potential for human error

      - name: Record staging approval completion
        shell: cmd
        run: |
          echo staging-approval-end=%time% >> %GITHUB_OUTPUT%
          echo ✅ MANUAL APPROVAL #2 COMPLETED at %date% %time%

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: [build-docker, manual-approval-staging]
    runs-on: self-hosted
    outputs:
      staging-start: ${{ steps.timing.outputs.staging-start }}
      staging-end: ${{ steps.timing.outputs.staging-end }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Record staging deploy start
        id: timing
        shell: cmd
        run: |
          echo staging-start=%time% >> %GITHUB_OUTPUT%
          echo 🏗️ STAGING DEPLOYMENT STARTED at %date% %time%

      - name: Deploy to staging namespace
        shell: cmd
        run: |
          echo 🎯 TRADITIONAL APPROACH: Real kubectl deployment to local cluster
          echo 🐳 Using image: ${{ env.IMAGE_NAME }}:traditional-cicd-${{ env.SHORT_SHA }}
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/user-service-deployment.yaml -n staging
          kubectl set image deployment/user-service-deployment user-service=${{ env.IMAGE_NAME }}:traditional-cicd-${{ env.SHORT_SHA }} -n staging
          kubectl rollout status deployment/user-service-deployment -n staging --timeout=300s
          echo ✅ Real staging deployment completed

      - name: Staging health check
        shell: cmd
        run: |
          echo 🏥 Health checking staging environment...
          kubectl get pods -n staging
          kubectl wait --for=condition=ready pod -l app=user-service -n staging --timeout=120s
          echo ✅ Staging deployment healthy

      - name: Record staging completion
        shell: cmd
        run: |
          echo staging-end=%time% >> %GITHUB_OUTPUT%
          echo ✅ STAGING DEPLOYMENT COMPLETED at %date% %time%

  # Job 6: Manual Approval for Production
  manual-approval-production:
    name: 🚨 Manual Approval - Production (5min wait)
    needs: deploy-staging
    runs-on: self-hosted
    outputs:
      prod-approval-start: ${{ steps.timing.outputs.prod-approval-start }}
      prod-approval-end: ${{ steps.timing.outputs.prod-approval-end }}
    environment: 
      name: approve-production
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Record production approval start
        id: timing
        shell: cmd
        run: |
          echo prod-approval-start=%time% >> %GITHUB_OUTPUT%
          echo 🔐 MANUAL APPROVAL #3 REQUESTED at %date% %time%

      - name: Production deployment approval
        shell: cmd
        run: |
          echo 🔐 TRADITIONAL CI/CD: Manual production approval required
          echo 👤 Critical decision point - deploy to production?
          echo 📊 High-stakes manual intervention - risk of errors

      - name: Record production approval completion
        shell: cmd
        run: |
          echo prod-approval-end=%time% >> %GITHUB_OUTPUT%
          echo ✅ MANUAL APPROVAL #3 COMPLETED at %date% %time%

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: [build-docker, manual-approval-production]
    runs-on: self-hosted
    outputs:
      production-start: ${{ steps.timing.outputs.production-start }}
      production-end: ${{ steps.timing.outputs.production-end }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Record production deploy start
        id: timing
        shell: cmd
        run: |
          echo production-start=%time% >> %GITHUB_OUTPUT%
          echo 🚀 PRODUCTION DEPLOYMENT STARTED at %date% %time%

      - name: Deploy to production (default namespace)
        shell: cmd
        run: |
          echo 🎯 TRADITIONAL APPROACH: Real production deployment to local cluster
          echo 🐳 Using image: ${{ env.IMAGE_NAME }}:traditional-cicd-${{ env.SHORT_SHA }}
          kubectl apply -f k8s/user-service-deployment.yaml
          kubectl set image deployment/user-service-deployment user-service=${{ env.IMAGE_NAME }}:traditional-cicd-${{ env.SHORT_SHA }}
          kubectl rollout status deployment/user-service-deployment --timeout=300s
          echo ✅ Real production deployment completed

      - name: Production health check
        shell: cmd
        run: |
          echo 🏥 Health checking production environment...
          kubectl get pods
          kubectl wait --for=condition=ready pod -l app=user-service --timeout=120s
          echo ✅ Production deployment healthy

      - name: Record production completion
        shell: cmd
        run: |
          echo production-end=%time% >> %GITHUB_OUTPUT%
          echo ✅ PRODUCTION DEPLOYMENT COMPLETED at %date% %time%
