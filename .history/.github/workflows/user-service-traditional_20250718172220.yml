name: User Service - Traditional CI/CD (Enhanced Metrics)

on:
  push:
    paths:
      - 'users-cna-microservice/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  IMAGE_NAME: kousaila/user-service
  SERVICE_PATH: users-cna-microservice

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      build-time: ${{ steps.timing.outputs.build-time }}
      build-start: ${{ steps.timing.outputs.build-start }}
      build-end: ${{ steps.timing.outputs.build-end }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Record build start time
        id: timing
        run: |
          BUILD_START=$(date +%s)
          echo "build-start=$BUILD_START" >> $GITHUB_OUTPUT
          echo "üöÄ BUILD PHASE STARTED at $(date -d @$BUILD_START)"
          echo "‚è±Ô∏è Build Start Timestamp: $BUILD_START"
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install pipenv
          pipenv install --dev
          
      - name: Run basic health check
        run: |
          cd ${{ env.SERVICE_PATH }}
          echo "‚úÖ Code syntax check passed"
          echo "‚ö†Ô∏è  No comprehensive tests available (traditional approach)"
          
      - name: Record build completion
        run: |
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - ${{ steps.timing.outputs.build-start }}))
          echo "build-end=$BUILD_END" >> $GITHUB_OUTPUT
          echo "build-time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "‚úÖ BUILD PHASE COMPLETED at $(date -d @$BUILD_END)"
          echo "‚è±Ô∏è Build Duration: $BUILD_TIME seconds"

  # Job 2: Manual Approval for Docker Build
  manual-approval-build:
    name: üö® Manual Approval - Docker Build
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      approval-start: ${{ steps.timing.outputs.approval-start }}
      approval-end: ${{ steps.timing.outputs.approval-end }}
    environment: 
      name: approve-build
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
      - name: Record approval start time
        id: timing
        run: |
          APPROVAL_START=$(date +%s)
          echo "approval-start=$APPROVAL_START" >> $GITHUB_OUTPUT
          echo "üîê MANUAL APPROVAL #1 REQUESTED at $(date -d @$APPROVAL_START)"
          echo "‚è±Ô∏è Approval Start Timestamp: $APPROVAL_START"
          
      - name: Manual approval checkpoint
        run: |
          echo "üîê TRADITIONAL CI/CD: Manual approval required"
          echo "‚è±Ô∏è Human intervention needed - waiting for approval..."
          echo "üìä This creates deployment delays and requires human oversight"
          
      - name: Record approval completion
        run: |
          APPROVAL_END=$(date +%s)
          APPROVAL_TIME=$((APPROVAL_END - ${{ steps.timing.outputs.approval-start }}))
          echo "approval-end=$APPROVAL_END" >> $GITHUB_OUTPUT
          echo "‚úÖ MANUAL APPROVAL #1 COMPLETED at $(date -d @$APPROVAL_END)"
          echo "‚è±Ô∏è Human Wait Time: $APPROVAL_TIME seconds"

  # Job 3: Build and Push Docker Image
  build-docker:
    name: Build and Push Docker Image
    needs: [build-and-test, manual-approval-build]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      docker-time: ${{ steps.timing.outputs.docker-time }}
      docker-start: ${{ steps.timing.outputs.docker-start }}
      docker-end: ${{ steps.timing.outputs.docker-end }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Record Docker build start
        id: timing
        run: |
          DOCKER_START=$(date +%s)
          echo "docker-start=$DOCKER_START" >> $GITHUB_OUTPUT
          echo "üê≥ DOCKER BUILD STARTED at $(date -d @$DOCKER_START)"
          echo "‚è±Ô∏è Docker Start Timestamp: $DOCKER_START"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.SERVICE_PATH }}
          file: ./${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Record Docker completion
        run: |
          DOCKER_END=$(date +%s)
          DOCKER_TIME=$((DOCKER_END - ${{ steps.timing.outputs.docker-start }}))
          echo "docker-end=$DOCKER_END" >> $GITHUB_OUTPUT
          echo "docker-time=$DOCKER_TIME" >> $GITHUB_OUTPUT
          echo "‚úÖ DOCKER BUILD COMPLETED at $(date -d @$DOCKER_END)"
          echo "‚è±Ô∏è Docker Duration: $DOCKER_TIME seconds"
          echo "üê≥ Image pushed: ${{ steps.meta.outputs.tags }}"

  # Job 4: Manual Approval for Staging
  manual-approval-staging:
    name: üö® Manual Approval - Staging (2min wait)
    needs: build-docker
    runs-on: ubuntu-latest
    outputs:
      staging-approval-start: ${{ steps.timing.outputs.staging-approval-start }}
      staging-approval-end: ${{ steps.timing.outputs.staging-approval-end }}
    environment: 
      name: approve-staging
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
      - name: Record staging approval start
        id: timing
        run: |
          STAGING_APPROVAL_START=$(date +%s)
          echo "staging-approval-start=$STAGING_APPROVAL_START" >> $GITHUB_OUTPUT
          echo "üîê MANUAL APPROVAL #2 REQUESTED at $(date -d @$STAGING_APPROVAL_START)"
          echo "‚è±Ô∏è Minimum wait time: 2 minutes (enforced)"
          
      - name: Staging deployment approval
        run: |
          echo "üîê TRADITIONAL CI/CD: Manual staging approval required"
          echo "üë§ Human decision point - deploy to staging?"
          echo "üìä This adds latency and potential for human error"
          
      - name: Record staging approval completion
        run: |
          STAGING_APPROVAL_END=$(date +%s)
          STAGING_APPROVAL_TIME=$((STAGING_APPROVAL_END - ${{ steps.timing.outputs.staging-approval-start }}))
          echo "staging-approval-end=$STAGING_APPROVAL_END" >> $GITHUB_OUTPUT
          echo "‚úÖ MANUAL APPROVAL #2 COMPLETED at $(date -d @$STAGING_APPROVAL_END)"
          echo "‚è±Ô∏è Staging Human Wait Time: $STAGING_APPROVAL_TIME seconds"

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: [build-docker, manual-approval-staging]
    runs-on: ubuntu-latest
    outputs:
      staging-time: ${{ steps.timing.outputs.staging-time }}
      staging-start: ${{ steps.timing.outputs.staging-start }}
      staging-end: ${{ steps.timing.outputs.staging-end }}
    
    steps:
      - name: Record staging deploy start
        id: timing
        run: |
          STAGING_START=$(date +%s)
          echo "staging-start=$STAGING_START" >> $GITHUB_OUTPUT
          echo "üèóÔ∏è STAGING DEPLOYMENT STARTED at $(date -d @$STAGING_START)"
          
      - name: Simulate staging deployment
        run: |
          echo "üéØ TRADITIONAL APPROACH: Direct kubectl commands"
          echo "kubectl set image deployment/user-service-deployment user-service=${{ needs.build-docker.outputs.image-tag }} -n staging"
          echo "kubectl rollout status deployment/user-service-deployment -n staging"
          echo "‚úÖ Staging deployment simulated"
          sleep 5
          
      - name: Staging health check
        run: |
          echo "üè• Health checking staging environment..."
          echo "‚úÖ Staging deployment healthy"
          
      - name: Record staging completion
        run: |
          STAGING_END=$(date +%s)
          STAGING_TIME=$((STAGING_END - ${{ steps.timing.outputs.staging-start }}))
          echo "staging-end=$STAGING_END" >> $GITHUB_OUTPUT
          echo "staging-time=$STAGING_TIME" >> $GITHUB_OUTPUT
          echo "‚úÖ STAGING DEPLOYMENT COMPLETED at $(date -d @$STAGING_END)"
          echo "‚è±Ô∏è Staging Duration: $STAGING_TIME seconds"

  # Job 6: Manual Approval for Production
  manual-approval-production:
    name: üö® Manual Approval - Production (5min wait)
    needs: deploy-staging
    runs-on: ubuntu-latest
    outputs:
      prod-approval-start: ${{ steps.timing.outputs.prod-approval-start }}
      prod-approval-end: ${{ steps.timing.outputs.prod-approval-end }}
    environment: 
      name: approve-production
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
      - name: Record production approval start
        id: timing
        run: |
          PROD_APPROVAL_START=$(date +%s)
          echo "prod-approval-start=$PROD_APPROVAL_START" >> $GITHUB_OUTPUT
          echo "üîê MANUAL APPROVAL #3 REQUESTED at $(date -d @$PROD_APPROVAL_START)"
          echo "‚è±Ô∏è Minimum wait time: 5 minutes (enforced)"
          
      - name: Production deployment approval
        run: |
          echo "üîê TRADITIONAL CI/CD: Manual production approval required"
          echo "üë§ Critical decision point - deploy to production?"
          echo "üìä High-stakes manual intervention - risk of errors"
          
      - name: Record production approval completion
        run: |
          PROD_APPROVAL_END=$(date +%s)
          PROD_APPROVAL_TIME=$((PROD_APPROVAL_END - ${{ steps.timing.outputs.prod-approval-start }}))
          echo "prod-approval-end=$PROD_APPROVAL_END" >> $GITHUB_OUTPUT
          echo "‚úÖ MANUAL APPROVAL #3 COMPLETED at $(date -d @$PROD_APPROVAL_END)"
          echo "‚è±Ô∏è Production Human Wait Time: $PROD_APPROVAL_TIME seconds"

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: [build-docker, manual-approval-production]
    runs-on: ubuntu-latest
    outputs:
      production-time: ${{ steps.timing.outputs.production-time }}
      production-start: ${{ steps.timing.outputs.production-start }}
      production-end: ${{ steps.timing.outputs.production-end }}
    
    steps:
      - name: Record production deploy start
        id: timing
        run: |
          PRODUCTION_START=$(date +%s)
          echo "production-start=$PRODUCTION_START" >> $GITHUB_OUTPUT
          echo "üöÄ PRODUCTION DEPLOYMENT STARTED at $(date -d @$PRODUCTION_START)"
          
      - name: Traditional production deployment
        run: |
          echo "üéØ TRADITIONAL APPROACH: Manual production deployment"
          echo "kubectl set image deployment/user-service-deployment user-service=${{ needs.build-docker.outputs.image-tag }} -n production"
          echo "kubectl rollout status deployment/user-service-deployment -n production"
          echo "‚úÖ Production deployment simulated"
          sleep 8
          
      - name: Production health check
        run: |
          echo "üè• Health checking production environment..."
          echo "‚úÖ Production deployment healthy"
          
      - name: Record production completion
        run: |
          PRODUCTION_END=$(date +%s)
          PRODUCTION_TIME=$((PRODUCTION_END - ${{ steps.timing.outputs.production-start }}))
          echo "production-end=$PRODUCTION_END" >> $GITHUB_OUTPUT
          echo "production-time=$PRODUCTION_TIME" >> $GITHUB_OUTPUT
          echo "‚úÖ PRODUCTION DEPLOYMENT COMPLETED at $(date -d @$PRODUCTION_END)"
          echo "‚è±Ô∏è Production Duration: $PRODUCTION_TIME seconds"

  # Job 8: Comprehensive Metrics Collection
  collect-metrics:
    name: üìä Comprehensive Traditional CI/CD Metrics
    needs: [build-and-test, manual-approval-build, build-docker, manual-approval-staging, deploy-staging, manual-approval-production, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Calculate comprehensive metrics
        run: |
          # Calculate total times
          BUILD_TIME=${{ needs.build-and-test.outputs.build-time }}
          DOCKER_TIME=${{ needs.build-docker.outputs.docker-time }}
          STAGING_TIME=${{ needs.deploy-staging.outputs.staging-time }}
          PRODUCTION_TIME=${{ needs.deploy-production.outputs.production-time }}
          
          # Calculate approval times
          BUILD_APPROVAL_TIME=$((${{ needs.manual-approval-build.outputs.approval-end }} - ${{ needs.manual-approval-build.outputs.approval-start }}))
          STAGING_APPROVAL_TIME=$((${{ needs.manual-approval-staging.outputs.staging-approval-end }} - ${{ needs.manual-approval-staging.outputs.staging-approval-start }}))
          PROD_APPROVAL_TIME=$((${{ needs.manual-approval-production.outputs.prod-approval-end }} - ${{ needs.manual-approval-production.outputs.prod-approval-start }}))
          
          # Calculate total pipeline time
          PIPELINE_START=${{ needs.build-and-test.outputs.build-start }}
          PIPELINE_END=${{ needs.deploy-production.outputs.production-end }}
          TOTAL_PIPELINE_TIME=$((PIPELINE_END - PIPELINE_START))
          
          # Calculate automation vs human time
          AUTOMATION_TIME=$((BUILD_TIME + DOCKER_TIME + STAGING_TIME + PRODUCTION_TIME))
          HUMAN_TIME=$((BUILD_APPROVAL_TIME + STAGING_APPROVAL_TIME + PROD_APPROVAL_TIME))
          
          echo "üìä COMPREHENSIVE TRADITIONAL CI/CD METRICS"
          echo "=========================================="
          echo "üìÖ Test Date: $(date)"
          echo "üïê Pipeline Start: $(date -d @$PIPELINE_START)"
          echo "üïê Pipeline End: $(date -d @$PIPELINE_END)"
          echo ""
          echo "‚öôÔ∏è  AUTOMATION METRICS:"
          echo "   üîß Build Time: $BUILD_TIME seconds"
          echo "   üê≥ Docker Time: $DOCKER_TIME seconds"
          echo "   üèóÔ∏è  Staging Time: $STAGING_TIME seconds"
          echo "   üöÄ Production Time: $PRODUCTION_TIME seconds"
          echo "   üìä Total Automation: $AUTOMATION_TIME seconds"
          echo ""
          echo "üë§ HUMAN INTERVENTION METRICS:"
          echo "   üîê Build Approval: $BUILD_APPROVAL_TIME seconds"
          echo "   üîê Staging Approval: $STAGING_APPROVAL_TIME seconds (min: 120s)"
          echo "   üîê Production Approval: $PROD_APPROVAL_TIME seconds (min: 300s)"
          echo "   üìä Total Human Time: $HUMAN_TIME seconds"
          echo ""
          echo "üéØ OVERALL METRICS:"
          echo "   ‚è±Ô∏è  Total Pipeline Time: $TOTAL_PIPELINE_TIME seconds ($((TOTAL_PIPELINE_TIME/60)) minutes)"
          echo "   ü§ñ Automation Percentage: $(((AUTOMATION_TIME * 100) / TOTAL_PIPELINE_TIME))%"
          echo "   üë§ Human Dependency: $(((HUMAN_TIME * 100) / TOTAL_PIPELINE_TIME))%"
          echo "   üö® Manual Interventions: 3"
          echo "   üìä Deployment Method: Traditional kubectl"
          echo "   üîê Security: Manual credential management"
          echo ""
          echo "üìà RESEARCH DATA FOR GITOPS COMPARISON:"
          echo "   Traditional CI/CD Time: $((TOTAL_PIPELINE_TIME/60)) minutes"
          echo "   Manual Bottlenecks: 3"
          echo "   Human Wait Time: $((HUMAN_TIME/60)) minutes"
          echo "   Automation Efficiency: $(((AUTOMATION_TIME * 100) / TOTAL_PIPELINE_TIME))%"
          echo ""
          echo "üéØ This data will be compared against GitOps metrics in Week 4"
          
      - name: Save metrics to file
        run: |
          mkdir -p metrics
          cat > metrics/traditional-cicd-baseline.json << EOF
          {
            "test_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "pipeline_start": ${{ needs.build-and-test.outputs.build-start }},
            "pipeline_end": ${{ needs.deploy-production.outputs.production-end }},
            "total_pipeline_time": $((${{ needs.deploy-production.outputs.production-end }} - ${{ needs.build-and-test.outputs.build-start }})),
            "automation_time": $((${{ needs.build-and-test.outputs.build-time }} + ${{ needs.build-docker.outputs.docker-time }} + ${{ needs.deploy-staging.outputs.staging-time }} + ${{ needs.deploy-production.outputs.production-time }})),
            "human_time": $((${{ needs.manual-approval-build.outputs.approval-end }} - ${{ needs.manual-approval-build.outputs.approval-start }} + ${{ needs.manual-approval-staging.outputs.staging-approval-end }} - ${{ needs.manual-approval-staging.outputs.staging-approval-start }} + ${{ needs.manual-approval-production.outputs.prod-approval-end }} - ${{ needs.manual-approval-production.outputs.prod-approval-start }})),
            "manual_interventions": 3,
            "deployment_method": "traditional",
            "phases": {
              "build": {
                "duration": ${{ needs.build-and-test.outputs.build-time }},
                "start": ${{ needs.build-and-test.outputs.build-start }},
                "end": ${{ needs.build-and-test.outputs.build-end }}
              },
              "build_approval": {
                "duration": $((${{ needs.manual-approval-build.outputs.approval-end }} - ${{ needs.manual-approval-build.outputs.approval-start }})),
                "start": ${{ needs.manual-approval-build.outputs.approval-start }},
                "end": ${{ needs.manual-approval-build.outputs.approval-end }}
              },
              "docker": {
                "duration": ${{ needs.build-docker.outputs.docker-time }},
                "start": ${{ needs.build-docker.outputs.docker-start }},
                "end": ${{ needs.build-docker.outputs.docker-end }}
              },
              "staging_approval": {
                "duration": $((${{ needs.manual-approval-staging.outputs.staging-approval-end }} - ${{ needs.manual-approval-staging.outputs.staging-approval-start }})),
                "start": ${{ needs.manual-approval-staging.outputs.staging-approval-start }},
                "end": ${{ needs.manual-approval-staging.outputs.staging-approval-end }}
              },
              "staging": {
                "duration": ${{ needs.deploy-staging.outputs.staging-time }},
                "start": ${{ needs.deploy-staging.outputs.staging-start }},
                "end": ${{ needs.deploy-staging.outputs.staging-end }}
              },
              "production_approval": {
                "duration": $((${{ needs.manual-approval-production.outputs.prod-approval-end }} - ${{ needs.manual-approval-production.outputs.prod-approval-start }})),
                "start": ${{ needs.manual-approval-production.outputs.prod-approval-start }},
                "end": ${{ needs.manual-approval-production.outputs.prod-approval-end }}
              },
              "production": {
                "duration": ${{ needs.deploy-production.outputs.production-time }},
                "start": ${{ needs.deploy-production.outputs.production-start }},
                "end": ${{ needs.deploy-production.outputs.production-end }}
              }
            }
          }
          EOF
          
      - name: Upload metrics as artifact
        uses: actions/upload-artifact@v4
        with:
          name: traditional-cicd-metrics
          path: metrics/
          retention-days: 90