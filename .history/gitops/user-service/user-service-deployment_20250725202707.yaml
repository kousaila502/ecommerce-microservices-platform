# =============================================================================
# GITOPS-OPTIMIZED USER SERVICE DEPLOYMENT
# ESI-SBA Thesis Research - GitOps vs Traditional CI/CD Comparison
# Phase 3: GitOps Implementation with ArgoCD
# =============================================================================

---
# User Service Deployment with GitOps Optimizations
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service-deployment
  namespace: user-service
  labels:
    app: user-service
    component: application
    service: user-service
    # GitOps Methodology Labels for Monitoring Differentiation
    methodology: gitops
    pipeline-type: argocd
    deployment-approach: declarative
    research-phase: phase3-gitops
    managed-by: argocd
    # Version Management
    version-series: "7.0.1.x"
    # Application Metadata
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: user-service-deployment
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: user-service
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/version: "7.0.1.1"
  annotations:
    # ArgoCD Sync Wave Annotations for Proper Deployment Order
    argocd.argoproj.io/sync-wave: "2"  # Deploy after database (wave 1)
    argocd.argoproj.io/sync-options: "Prune=true,Delete=true,CreateNamespace=false"
    argocd.argoproj.io/compare-options: "ServerSideDiff=true,IgnoreExtraneous=false"
    # GitOps Research Annotations
    gitops.research/deployment-method: "declarative"
    gitops.research/automation-level: "100"
    gitops.research/manual-interventions: "0"
    gitops.research/thesis-component: "user-service-application"
    gitops.research/version-strategy: "semantic-gitops"
    # Rollback-Friendly Configuration
    deployment.kubernetes.io/revision: "1"
    gitops.research/rollback-enabled: "true"
    gitops.research/previous-version: "6.2.1.1"
    # Operational Annotations
    kubectl.kubernetes.io/last-applied-configuration: |
      {"kind":"Deployment","apiVersion":"apps/v1","metadata":{"name":"user-service-deployment"}}
spec:
  replicas: 1
  # Rollback-Friendly Strategy Configuration
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0        # Zero-downtime deployments for GitOps
      maxSurge: 1             # Allow one extra pod during updates
  revisionHistoryLimit: 10    # Keep history for rollbacks
  progressDeadlineSeconds: 600 # 10 minutes timeout for deployments
  selector:
    matchLabels:
      app: user-service
      component: application
  template:
    metadata:
      labels:
        app: user-service
        component: application
        service: user-service
        # GitOps Methodology Labels
        methodology: gitops
        pipeline-type: argocd
        deployment-approach: declarative
        managed-by: argocd
        version-series: "7.0.1.x"
        # Standard Kubernetes Labels
        app.kubernetes.io/name: user-service
        app.kubernetes.io/instance: user-service-deployment
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: user-service
        app.kubernetes.io/managed-by: argocd
        app.kubernetes.io/version: "7.0.1.1"
      annotations:
        # Pod-level GitOps annotations
        gitops.research/pod-deployment: "declarative"
        gitops.research/version-strategy: "semantic-gitops"
        # Prometheus Monitoring
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        # Deployment tracking
        deployment.kubernetes.io/revision: "1"
    spec:
      containers:
      - name: user-service
        # GitOps Versioning Strategy - 7.0.1.x Series
        image: kousaila/user-service:gitops-7.0.1.1
        imagePullPolicy: Always
        # Environment Variables (same as existing configuration)
        env:
        - name: DATABASE_URL
          value: postgresql+asyncpg://admin:password123@user-service-postgresql:5432/userdb
        - name: POSTGRES_HOST
          value: user-service-postgresql  # Updated to match GitOps service name
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: userdb
        - name: POSTGRES_USER
          value: admin
        - name: POSTGRES_PASSWORD
          value: password123
        - name: SECRET_KEY
          value: your-super-secret-jwt-key-change-in-production
        - name: ALGORITHM
          value: HS256
        - name: ACCESS_TOKEN_EXPIRE_MINUTES
          value: "30"
        - name: CORS_ORIGINS
          value: "http://localhost:3000,http://127.0.0.1:3000,http://127.0.0.1:50951"
        # GitOps-specific environment variables
        - name: DEPLOYMENT_METHOD
          value: "gitops-argocd"
        - name: RESEARCH_PHASE
          value: "phase3-gitops-comparison"
        - name: VERSION_SERIES
          value: "7.0.1.x"
        - name: PIPELINE_TYPE
          value: "argocd-declarative"
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        # Health Checks for GitOps Reliability
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        # Startup Probe for slow-starting applications
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        # Resource Limits (same as existing configuration)
        resources:
          requests:
            memory: "64Mi"     # Same as existing
            cpu: "50m"         # Same as existing
          limits:
            memory: "128Mi"    # Same as existing
            cpu: "100m"        # Same as existing
        # Security Context for GitOps best practices
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false  # FastAPI needs writable tmp
        # Volume mounts for configuration
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: app-config
        configMap:
          name: user-service-config
      - name: tmp-volume
        emptyDir: {}
      # Security and scheduling optimizations
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      # Node selection for consistent deployment
      nodeSelector:
        kubernetes.io/os: linux
      # Tolerations for research environment
      tolerations:
      - key: "research-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# User Service Service with GitOps Labels
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: user-service
  labels:
    app: user-service
    component: application-service
    service: user-service
    # GitOps Methodology Labels
    methodology: gitops
    pipeline-type: argocd
    deployment-approach: declarative
    managed-by: argocd
    version-series: "7.0.1.x"
    # Standard Kubernetes Labels
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: user-service
    app.kubernetes.io/component: service
    app.kubernetes.io/part-of: user-service
    app.kubernetes.io/managed-by: argocd
  annotations:
    # ArgoCD Service Annotations
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/sync-options: "Prune=true"
    # GitOps Research Annotations
    gitops.research/service-type: "application"
    gitops.research/deployment-method: "declarative"
    gitops.research/load-balancer-type: "cluster-ip"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9090
    targetPort: http
    protocol: TCP
  selector:
    app: user-service
    component: application
  sessionAffinity: None

---
# User Service ConfigMap for GitOps Configuration Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: user-service
  labels:
    app: user-service
    component: application-config
    service: user-service
    methodology: gitops
    pipeline-type: argocd
    managed-by: argocd
    version-series: "7.0.1.x"
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    gitops.research/config-type: "application-configuration"
data:
  app.properties: |
    # User Service Configuration for GitOps Research Environment
    # Version Series: 7.0.1.x
    
    # Application Settings
    app.name=user-service
    app.version=7.0.1.1
    app.environment=gitops-research
    app.deployment.method=argocd-declarative
    
    # Research Configuration
    research.phase=phase3-gitops
    research.methodology=gitops
    research.automation.level=100
    research.manual.interventions=0
    
    # Performance Settings
    app.thread.pool.size=10
    app.connection.timeout=30000
    app.request.timeout=60000
    
    # Monitoring Configuration
    metrics.enabled=true
    metrics.endpoint=/metrics
    health.check.endpoint=/health
    
    # GitOps Specific Settings
    gitops.sync.enabled=true
    gitops.rollback.enabled=true
    gitops.version.strategy=semantic
    
  logging.conf: |
    # Logging configuration for GitOps research
    [loggers]
    keys=root,uvicorn,fastapi
    
    [handlers]
    keys=console,file
    
    [formatters]
    keys=generic
    
    [logger_root]
    level=INFO
    handlers=console,file
    qualname=
    
    [logger_uvicorn]
    level=INFO
    handlers=console,file
    qualname=uvicorn
    propagate=0
    
    [logger_fastapi]
    level=INFO
    handlers=console,file
    qualname=fastapi
    propagate=0
    
    [handler_console]
    class=StreamHandler
    args=(sys.stdout,)
    level=INFO
    formatter=generic
    
    [handler_file]
    class=FileHandler
    args=('/tmp/user-service.log',)
    level=INFO
    formatter=generic
    
    [formatter_generic]
    format=[GitOps-Research] %(asctime)s [%(levelname)s] %(name)s: %(message)s
    datefmt=%Y-%m-%d %H:%M:%S

---
# Horizontal Pod Autoscaler for GitOps Scalability
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-service-hpa
  namespace: user-service
  labels:
    app: user-service
    component: autoscaler
    methodology: gitops
    pipeline-type: argocd
    managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    gitops.research/scaling-strategy: "horizontal"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-service-deployment
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60